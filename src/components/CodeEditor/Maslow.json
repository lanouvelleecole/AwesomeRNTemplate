{
  "codePart": "import React, { useState, useEffect } from 'react';\nimport { View } from 'react-native';\nimport { CodeInput } from 'react-native-confirmation-code-input'; // A library that provides a customizable and easy to use code editor\nimport { mono } from 'react-syntax-highlighter/dist/styles/prism'; // import syntax theme\nimport Prism, { PrismLight } from 'react-native-syntax-highlighter'; // import syntax highlighter\n\n// Supported language for syntax highlighting\nimport js from 'react-syntax-highlighter/dist/languages/prism/javascript';\nimport css from 'react-syntax-highlighter/dist/languages/prism/css';\nimport java from 'react-syntax-highlighter/dist/languages/prism/java';\n\nPrismLight.registerLanguage('js', js);\nPrismLight.registerLanguage('css', css);\nPrismLight.registerLanguage('java', java);\n\n/**\n * CodeEditor component\n * @param {String} initialCode the initial text/code to display in the code editor\n * @param {Function} onCodeChanged a callback that gets executed whenever the text/code in the editor changes\n * @param {String} language the programming language of the code, for syntax highlighting\n */\nconst CodeEditor = ({ initialCode, onCodeChanged, language }) => {\n  const [code, setCode] = useState(initialCode);\n\n  // To handle code change event\n  const onCodeChange = (newCode) => {\n    setCode(newCode);  // Update the code state\n    onCodeChanged(newCode);  // trigger the onCodeChanged callback\n  };\n\n  // Update internal state when initialCode prop changes\n  useEffect(()=>{\n    setCode(initialCode);\n  }, [initialCode]);\n\n  return (\n    <View>\n      <CodeInput\n        autoFocus={true}\n        codeLength={20}\n        activeColor='rgba(49, 180, 4, 1)'\n        inactiveColor='rgba(49, 180, 4, 1.3)'\n        ignoreCase={true}\n        onFulfill={onCodeChange}\n      />\n      <Prism\n        language={language}\n        style={mono}\n      >\n        {code}\n      </Prism>\n    </View>\n  );\n};\n\nexport default CodeEditor;\n",
  "answer": "Here is a basic implementation of the CodeEditor component using react native. For the code editing and syntax highlighting part, we are using react-native-syntax-highlighter library. This is a mobile friendly syntax highlighter built with react-native.\n\n```jsx\nimport React, { useState, useEffect } from 'react';\nimport { View } from 'react-native';\nimport { CodeInput } from 'react-native-confirmation-code-input'; // A library that provides a customizable and easy to use code editor\nimport { mono } from 'react-syntax-highlighter/dist/styles/prism'; // import syntax theme\nimport Prism, { PrismLight } from 'react-native-syntax-highlighter'; // import syntax highlighter\n\n// Supported language for syntax highlighting\nimport js from 'react-syntax-highlighter/dist/languages/prism/javascript';\nimport css from 'react-syntax-highlighter/dist/languages/prism/css';\nimport java from 'react-syntax-highlighter/dist/languages/prism/java';\n\nPrismLight.registerLanguage('js', js);\nPrismLight.registerLanguage('css', css);\nPrismLight.registerLanguage('java', java);\n\n/**\n * CodeEditor component\n * @param {String} initialCode the initial text/code to display in the code editor\n * @param {Function} onCodeChanged a callback that gets executed whenever the text/code in the editor changes\n * @param {String} language the programming language of the code, for syntax highlighting\n */\nconst CodeEditor = ({ initialCode, onCodeChanged, language }) => {\n  const [code, setCode] = useState(initialCode);\n\n  // To handle code change event\n  const onCodeChange = (newCode) => {\n    setCode(newCode);  // Update the code state\n    onCodeChanged(newCode);  // trigger the onCodeChanged callback\n  };\n\n  // Update internal state when initialCode prop changes\n  useEffect(()=>{\n    setCode(initialCode);\n  }, [initialCode]);\n\n  return (\n    <View>\n      <CodeInput\n        autoFocus={true}\n        codeLength={20}\n        activeColor='rgba(49, 180, 4, 1)'\n        inactiveColor='rgba(49, 180, 4, 1.3)'\n        ignoreCase={true}\n        onFulfill={onCodeChange}\n      />\n      <Prism\n        language={language}\n        style={mono}\n      >\n        {code}\n      </Prism>\n    </View>\n  );\n};\n\nexport default CodeEditor;\n```\nThis component starts by extracting initialCode, onCodeChanged, and language from props, sets up an internal state for the code, and provides a method to update the code. This method will update the internal state and trigger the onCodeChanged callback.\n\nWhen the component is rendered, it displays a CodeInput component for user input and a Prism component for displaying the code with syntax highlighting. The Prism component takes the current code (stored in the component's state) and the specified language. It uses the mono style for syntax highlighting.\n\nPlease note that react-native-confirmation-code-input and react-native-syntax-highlighter are external libraries and you need to add them to your project before using this component. You can do this by running: npm install react-native-confirmation-code-input react-native-syntax-highlighter.",
  "what_we_wanna_do": "Create a function in a given programming language (via Chat GPT, the magical A.I.)",
  "name": "CodeEditor",
  "affine_subfolder": "src/components",
  "ask_for_subfolder": "src/components",
  "affine_string_repo": "src/AppStrings",
  "string_repo_folder_path": "src/AppStrings",
  "string_repo_file_path": "AppStrings.js",
  "string_name": "xf2j8VLZ",
  "string_src": "Visite cette page, et abonne toi à l'API Maslow. \nCe qui te donnera accès à un outil super-méga-ultra-utile pour toi, \nprogrammeur/artiste/businessman/rêveur/insomniaque/philosophe \n(PICK AND CHOOSE ONE ;-) . \n\nLe coût de la souscription est de 8 € seulement,\nAlors n'hésites surtout pas, et lance toi dans l'aventure ! \n\nSuis le lien ci dessous, pour souscrire à l'API Maslow, \net tu recevras une clé API (via l'adresse e-mail fournie durant paiement)\nce qui te permettra d'accèder aux immenses pouvoirs de MaslowGPT.",
  "string_dest": "Hello friend",
  "affine_file_where_we_use_string": "src/AllGenerators/SubscribeImpromptuCommand",
  "ask_for_js_file_string": "src/AllGenerators/SubscribeImpromptuCommand/asyncWork.js",
  "row_name": "suki",
  "question_type": "A UI that retrieves text, via TextInput.",
  "question_name": "DDs",
  "affine_questionnaire": "src",
  "questionnaire_folder_path": "src/AllPrompts/GetAllQuestionPrompts",
  "questionnaire_file_name": "questionnaire_file_name.js",
  "repo_name": "AppStrings",
  "description_string_name": "xghRgKlT",
  "description_string_src": "Anus malodorant",
  "description_string_dest": "Foul-smelling Anus",
  "error_string_name": "xEf4EJjy",
  "error_string_src": "Oups... Cette valeur n'est pas valide.",
  "error_string_dest": "Oops... This value is not valid.",
  "question_page_name": "TestPage",
  "question_default_answer": "currentItem?.name",
  "question_default_textinput": "currentItem?.name",
  "question_on_textinput_changed": "",
  "question_validity_condition": "input?.length > 0",
  "question_DB_save_path": "src\\pages\\TestPage\\pieces\\AddItemToTestPage\\AddItemToDB.js",
  "question_DB_edit_path": "src\\pages\\TestPage\\pieces\\EditItemInTestPage\\EditItemInTestPageDB.js",
  "databaseinfo_path": "src\\reduxState\\TestPage\\DatabaseInfo.js",
  "row_type": "TEXT",
  "row_default_value": "",
  "AddCommandName": "make-quick-fix",
  "AddCommandPrompts": "",
  "AddCommandActions": "",
  "TestPpt1": "g",
  "TestPpt2": "t",
  "GptQuestionName": "QNA",
  "AskQuestion": "Cree un template de README pour un package npm qui permet de faire les choses suivantes:\r\n\r\ngenerer du code informatique pour n'importe quel language de programmation existant \r\n\r\ncreer des application IOS/Android (React Native)\r\n\r\ncreer des packages npm (Typescript)\r\n\r\ncreer des serveurs backend (Express.js)\r\n\r\nCe package npm fonctionne via une UI terminal/cmd/powershell/etc...\r\n\r\nCe package se nomme MaslowGPT.\r\n\r\nLa commande d'installation est \r\n\r\nnpm i -g maslow\r\n\r\nUne fois installer, tu peux utiliser la commande\r\n\r\nnpx maslow\r\n\r\nPour demarrer MaslowGPT. Cette commande \r\naffiche une liste des outils disponibles pur toi.\r\nCi-dessous une description de tous les outils disponibles\r\n(Veille a bien ajouter tous les details que jai ajouter, par ex. generate, et subscribe, ont une description detaillee, ajoutes toutes les descriptions, n'enleve rien):\r\n\r\n--\r\n\r\ngenerate: Cette commande permet de generer, au choix:\r\n\r\n❯ Create a function in a given programming \r\nlanguage \r\n\r\n(via Chat GPT, \r\nyou can design your own functions, \r\nin any programming language known to man, \r\nbased on the description you'll give me from prompts)  \r\n\r\n❯ Create a React Native page.\r\n\r\n(a page is basically a template of a whole app screen,\r\nwith CRUD features. It can be anything you want. A TODO List, A list of customers for your delivery app, A list of recipes for your cooking app, \r\netc.... Your imagination is the limit)\r\n\r\n❯ Create a React Native subpage\r\n\r\n(a subpage is a UI that provides a horizontal scrolling list of individual UI's. Those individual UI's can be generated using the npx maslow add-ui command)\r\n\r\n❯ Create a Javascript state.\r\n\r\n(utilisant useState)\r\n\r\n❯ Create a Javascript singleton\r\n\r\n(a singleton allows a programmer to \r\naccess global data safely, via getters and setters.\r\nThis is a simple and useful non-persistent data storage method)\r\n\r\n❯ Create a empty Javascript function skeleton\r\n\r\n(bare bones baby !)\r\n\r\n❯ Create a directory of international strings.  \r\n\r\n(For React Native app internationalization)\r\n\r\n❯ Create a persistent Javascript app state \r\n\r\n(with Redux and     \r\nSQLITE.)\r\n\r\n--\r\n\r\ncreate-react-native-app\r\n\r\nPermet de creer une application React Native\r\n\r\n--\r\n\r\nadd-ui\r\n\r\nPermet de creer une UI individuelle dans une subpage\r\n\r\n--\r\n\r\nask-question\r\n\r\nPermet de poser une question a Chat GPT, et d'obtenir une reponse.\r\n\r\n--\r\n\r\nadd-string\r\n\r\nPermet d'ajouter un string dans un repositoire de strings\r\nmultilingue (React Native)\r\n\r\n--\r\n\r\nsubscribe\r\n\r\nPermet de souscrire a l'API maslow-gpt-api,\r\nnecessaire au fonctionnement de MaslowGPT.\r\nLa souscription a l API coute 10 eur,\r\nce paiement unique vous donne acces a une cle API,\r\nvia email et sms,\r\nvous donnant acces a l'API.\r\nUne fois la souscription effectuee,\r\nla facturation se fait selon usage, au centime pres.\r\nDonc vous ne payez que ce que vous utilisez !\r\n\r\n--\r\n\r\nset-api-key\r\n\r\nPermet de fournir la cle API, et avoir acces au fonctionnalites de MaslowGPT\r\n\r\n--\r\n\r\ncreate-npm-package\r\n\r\nPermet de creer un package npm (Typescript)\r\n\r\n--\r\n\r\ncreate-backend-server\r\n\r\nPermet de creer un serveur backend (express.js)\r\n\r\n--\r\n\r\nadd-sdk-method\r\n\r\nPermet d'ajouter une methode a ton package npm\r\n\r\n--\r\n\r\nadd-api-endpoint\r\n\r\nPermet d'ajouter un endpoint d'API, dans ton serveur backend\r\n\r\n--\r\n\r\nset-ai-model\r\n\r\nPermet de selectionner le modele d'I.A. utiliser lors des requetes utilisant Chat GPT.\r\n\r\n--\r\n\r\ntranslate-strings\r\n\r\nPermet de traduire tous les strings situes dans un repo de strings multilingues,\r\ndans une Appli React Native, ou un package npm, ou un serveur, etc...\r\n\r\n--\r\n\r\nduplicate-thing\r\n\r\nPermet de dupliquer un fichier/dossier\r\na un emplacement souhaiter\r\n\r\n--\r\n\r\ndelete-thing\r\n\r\nPermet de supprimer un fichier/dossier\r\na un emplacement souhaiter\r\n\r\n--\r\n\r\nregen-ai-func\r\n\r\nPermet de re-generer une fonction generee via I.A.\r\n\r\n--\r\n\r\nmake-quick-fix\r\n\r\nPermet de transferer le code d une fonction generee via I.A., vers un fichier special,\r\npour pouvoir ensuite corriger/re-generer cette fonction.\r\n\r\n--\r\n\r\nadd-string-quick\r\n\r\nPermet de rapidement ajouter un string dans un repertoire de strings.\r\nThe string/text you want to add to the repository, MUST be copied to the clipboard prior to running it.\r\n\r\nMost of the subcommands above can be accessed using the 'npx maslow' command,\r\nor they can also be accessed individually using\r\n\r\nnpx maslow <command_name>\r\n\r\nLike\r\n\r\nnpx maslow generate\r\n\r\nor \r\n\r\nnpx maslow create-react-native-app\r\n\r\netc...\r\n\r\nThe following commands:\r\n\r\nregen-ai-func , make-quick-fix , and add-string-quick,\r\nare not accessible when using 'npx maslow'.\r\nYou need to access those commands individually, using the syntax below:\r\n\r\nnpx maslow regen-ai-func path/to/ai/function/folder\r\n\r\nnpx maslow make-quick-fix path/to/ai/function/folder\r\n\r\nnpx maslow add-string-quick path/to/file/containing/string.ext\r\n(the string in this file MUST be copied in the clipboard prior to running the command)\r\n\r\nPour illustrer tout ceci, nous allons creer \r\nune application Android/IOS nomme ArduinoGPT, ainsi qu un serveur backend,\r\nnomme maslow-gpt-server. Et un package npm nomme ArduinoGPTHex.\r\nIndique bien que ce processus est un point de reference sur lequels \r\nles utilisateur peuvent s'inspirer pour creer leur propres applications.\r\n\r\nCe processus de creation se deroule en plusieurs etapes:\r\n\r\n- Setup React Native, l'installation de tout ce qu'il faut \r\npour se lancer dans la creation d'appli IOS/Android, via ce lien\r\nhttps://reactnative.dev/docs/environment-setup?guide=native\r\n\r\n- Creation de l'application ArduinoGPT, avec la commande\r\nnpx maslow create-react-native-app\r\n\r\n- Creation de l'UI (interface utilisateur) de ArduinoGPT\r\n(creation de pages, subpages, etc...)\r\n\r\n- Creation du serveur maslow-gpt-server\r\n(setup linode, openai, namecheap, firebase, stripe, facturation, etc....)\r\n\r\n- Creation du SDK maslow-gpt-sdk, permettant d'utiliser\r\nles fonctionnalites du serveur dans ArduinoGPT\r\n\r\n- Implemente les fonctionnalites backend dans ArduinoGPT, et termine ArduinoGPT\r\n(UI de subscription a serveur, compilation, installation de programme via QR Code, etc...)\r\n\r\n- Publie ArduinoGPT sur Play Store & Apple Store\r\n\r\n- Cree package ArduinoGPTHex (Windows 10/Linux/MacOS)\r\n\r\n- Publie ArduinoGPTHex sur npm\r\n\r\n- Update ArduinoGPT sur stores, suite a creation de ce nouvel outil\r\n\r\n\r\nDonne moi un README magnifique, et ultra detaille, avec toutes les descriptions que jai pris le soin dajouter, et plus encore !!!\r\ncar je souhaites que ce package npm \r\ndevienne un succes mondial.\r\n\r\nAjoute un placeholder pour le logo de mon empire, dans le README.\r\nMets y un logo de pyramide, si possible, comme logo de placeholder.\r\n\r\nCree ce README en Anglais",
  "AffineDeletePath": "QNAS",
  "DeletePath": "QNAS/Maslow.json",
  "AffineOriginalPath": "src\\services\\DeletePreviousLookalikeLine\\DeletePreviousLookalikeLine.js",
  "OriginalPath": "src\\services\\DeletePreviousLookalikeLine\\DeletePreviousLookalikeLine.js",
  "DuplicatePath": "src\\services\\GrabSteakInSandwich",
  "delete_or_not": "Oui, supprime App.js et consorts.",
  "AppName": "Maslow",
  "gold_caviar": null,
  "get_appbar_title_dest": "Title",
  "AffineAppStrings": "src/AppStrings",
  "ChooseAppStrings": "src/AppStrings/AppStrings.js",
  "ChooseLanguage": "English",
  "ChooseAIModel": "gpt-4",
  "AnswerFileName": "answer.txt",
  "PkgName": "maslow-picker-uploader",
  "EndpointName": "delete_file_cloud",
  "SDKMethodName": "MaslowFilePickUp",
  "LatestAPIKey": "7911e50fa178ff7f5e286c0e39d4502d",
  "TestPrompt": "",
  "TestPrompt2": "",
  "TestPrompt3": "",
  "ChooseMaslowCMD": "generate",
  "get_ai_service_version": 26,
  "get_ai_service_language": "js",
  "get_ai_service_file_ext": "js",
  "get_ai_service_args": "initialCode (string, the initial code/text to add in the  code editor, or null if no initial stuff shall be added),\r\nonCodeChanged (a 1 arg callback that gets executed everytime the code editor's text changes)",
  "get_ai_service_description": "Returns a React Native component that provides a code/text editor.",
  "get_ai_service_return_value": "Returns a React Native component that provides a code/text editor. \r\n\r\nMake it extremely simple. Add the line numbers in the UI. Don't use third party stuff or libs, only use readily available components for this.",
  "get_quick_fix": "Add the following fixes to this function:\n\n// Importing necessary modules from react and react-native\nimport React, { useRef, useEffect, useState } from 'react'; \nimport { RichEditor } from 'react-native-pell-rich-editor'; \nimport { StyleSheet, TouchableOpacity } from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\n\n// CodeEditor function component\nexport const CodeEditor = ({ initialCode, onCodeChanged }) => { \n  // Creating a reference for the RichEditor component\n  const richText = useRef(null);\n\n  // State hook to keep track of the editor's content\n  const [content, setContent] = useState(initialCode || '');\n\n  // Using useEffect to set the initial content of the editor once after first render\n  useEffect(() => {\n    if (initialCode) {\n      // Setting the initial content to the editor using its reference\n      richText.current.setContentHTML(initialCode);\n      setContent(initialCode);\n    }\n  }, [initialCode]);\n\n  // Function to handle changes in the editor's content\n  const onContentChange = (text) => {\n    setContent(text);\n    // Checking if onCodeChanged callback is passed as props and calling it with text as argument\n    if (onCodeChanged) {\n      onCodeChanged(text);\n    }\n  };\n\n  return (\n    <>\n      {/* RichEditor component for editing the code */}\n      <RichEditor\n        ref={richText}\n        initialContentHTML={content}\n        onChange={onContentChange}\n        style={styles.codeEditor}\n      />\n      \n      {/* IconButton to save the changes */}\n      <TouchableOpacity \n        style={styles.fab}\n        onPress={() => {\n          // Logging the current text editor content to the console on button press\n          console.log('Button pressed. Current content:', content);\n        }}\n      >\n        <Icon name=\"check\" size={30} color=\"#FFF\" />\n      </TouchableOpacity>\n    </>\n  );\n}\n\n// Object holding the styling for the CodeEditor and button\nconst styles = StyleSheet.create({\n  codeEditor: {\n    flex: 1,\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor: '#000',\n  },\n  fab: {\n    position: 'absolute',\n    right: 30,\n    bottom: 30,\n    backgroundColor: '#03A9F4',\n    width: 56,\n    height: 56,\n    borderRadius: 28,\n    alignItems: 'center',\n    justifyContent: 'center',\n    elevation: 8\n  }\n});\n\n\nDont use react-native-pell-rich-editor, use basic components.\n\nAlso, add these props:\n\n<CodeEditor\n    initialCode={answer?.value}\n    onCodeChanged={(code) => {\n      onInput(code);\n    }}\n    textColor={\"black\"}\n    backgroundColor={\"yellow\"}\n    borderColor={'green'}\n    textFont={\"ComingSoon\"}\n    placeholderText={`Type the description here`}\n  />\n"
}