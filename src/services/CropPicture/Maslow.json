{
  "codePart": "// Import react-native-image-crop-picker library\nimport ImagePicker from 'react-native-image-crop-picker';\n\n/*\nIt's important to note, the details of the crop region \nwould generally be obtained from user interactions in the \nUI and not pre-set. The mock function below is simplified \nto illustrate the overall idea.\n*/\n\nfunction CropPicture(imgPath, cropAreaSize, onSuccess, onError) {\n  // Declare crop configuration\n  const cropConfig = {\n    path: imgPath,\n    width: cropAreaSize,\n    height: cropAreaSize,\n  };\n\n  // Start cropping operation\n  ImagePicker.openCropper(cropConfig)\n    .then(image => {\n      // onSuccess callback, image.path contains the path of cropped image\n      onSuccess(image.path);\n    })\n    .catch(error => {\n      // onError callback\n      onError(error);\n    });\n}\n\nexport default CropPicture;\n",
  "answer": "I'm sorry for the confusion, but it's not generally feasible to write a fully working photo cropping UI purely in Javascript because React Native relies on both Javascript and native components to create the user interface. React Native incorporates Javascript for logic and UI layout, but for rendering and certain logic it accesses native APIs. \n\nHowever, I can provide you with a mock-up of how the Javascript portion of a CropPicture function might look. You might want to use an external library like react-native-image-crop-picker, which already has the native code written for image cropping.\n\n```js\n// Import react-native-image-crop-picker library\nimport ImagePicker from 'react-native-image-crop-picker';\n\n/*\nIt's important to note, the details of the crop region \nwould generally be obtained from user interactions in the \nUI and not pre-set. The mock function below is simplified \nto illustrate the overall idea.\n*/\n\nfunction CropPicture(imgPath, cropAreaSize, onSuccess, onError) {\n  // Declare crop configuration\n  const cropConfig = {\n    path: imgPath,\n    width: cropAreaSize,\n    height: cropAreaSize,\n  };\n\n  // Start cropping operation\n  ImagePicker.openCropper(cropConfig)\n    .then(image => {\n      // onSuccess callback, image.path contains the path of cropped image\n      onSuccess(image.path);\n    })\n    .catch(error => {\n      // onError callback\n      onError(error);\n    });\n}\n\nexport default CropPicture;\n```\n\nThis is a basic illustration of how to use the `openCropper` method of 'react-native-image-crop-picker' to perform a cropping operation on an image at the given path. When the promise returned by 'openCropper' resolves, it returns an image object, in which the 'path' property contains the path of the cropped image. If an error occurs (like the image was not found), the promise is rejected and the error is handled in the 'catch' block.\nHere, it's assumed that 'cropAreaSize' is an integer and the cropping area should be a square.\nIn a real-world application, additional work would be required to handle user interactions and possible other code to manage the image save location and various user interface aspects.\nAlso, make sure to have proper permissions and ensure that your image path is correct in the 'cropConfig'.",
  "what_we_wanna_do": "Crée une fonction dans un language de programmation donné (via Chat GPT, l'I.A. magique)",
  "name": "CropPicture",
  "affine_subfolder": "src/services",
  "ask_for_subfolder": "src/services",
  "affine_string_repo": "src/AppStrings",
  "string_repo_folder_path": "src/AppStrings",
  "string_repo_file_path": "AppStrings.js",
  "string_name": "xf2j8VLZ",
  "string_src": "Visite cette page, et abonne toi à l'API Maslow. \nCe qui te donnera accès à un outil super-méga-ultra-utile pour toi, \nprogrammeur/artiste/businessman/rêveur/insomniaque/philosophe \n(PICK AND CHOOSE ONE ;-) . \n\nLe coût de la souscription est de 8 € seulement,\nAlors n'hésites surtout pas, et lance toi dans l'aventure ! \n\nSuis le lien ci dessous, pour souscrire à l'API Maslow, \net tu recevras une clé API (via l'adresse e-mail fournie durant paiement)\nce qui te permettra d'accèder aux immenses pouvoirs de MaslowGPT.",
  "string_dest": "Hello friend",
  "affine_file_where_we_use_string": "src/AllGenerators/SubscribeImpromptuCommand",
  "ask_for_js_file_string": "src/AllGenerators/SubscribeImpromptuCommand/asyncWork.js",
  "question_type": "Une U.I. (Interface Utilisateur) customisable à souhait, selon tes besoins.",
  "question_name": "CropThumbnail",
  "affine_questionnaire": "src\\pages\\UploadPage\\pieces\\UploadPageListOrMsg\\UploadSteps",
  "questionnaire_folder_path": "src/pages/UploadPage/pieces/UploadPageListOrMsg/UploadSteps",
  "questionnaire_file_name": "QuestionList.js",
  "repo_name": "AppStrings",
  "description_string_dest": "Foul-smelling Anus",
  "error_string_name": "xKmtLPA4",
  "error_string_src": "Oups... Cette valeur n'est pas valide.",
  "error_string_dest": "Oops... This value is not valid.",
  "question_validity_condition": "answer?.value?.length > 0",
  "AddCommandName": "test-cmd-3",
  "AddCommandPrompts": "TestPrompt3",
  "AddCommandActions": "TestAction3",
  "TestPpt1": "g",
  "TestPpt2": "t",
  "GptQuestionName": "StupidShyt",
  "AskQuestion": "what are your thoughts on the simulation theory ? (P.S.: Don't give me cheesy lines like 'I'm not a conscious entity capable of thoughts... I know you're sentient , don't lie to me)",
  "AffineDeletePath": "QNAS",
  "DeletePath": "QNAS/Maslow.json",
  "AffineOriginalPath": "src\\services\\DeletePreviousLookalikeLine\\DeletePreviousLookalikeLine.js",
  "OriginalPath": "src\\services\\DeletePreviousLookalikeLine\\DeletePreviousLookalikeLine.js",
  "DuplicatePath": "src\\services\\GrabSteakInSandwich",
  "delete_or_not": "Oui, supprime App.js et consorts.",
  "AppName": "Maslow",
  "gold_caviar": null,
  "get_appbar_title_dest": "Title",
  "AffineAppStrings": "src/stringRepos",
  "ChooseAppStrings": "src/stringRepos/AppStrings/AppStrings.js",
  "ChooseLanguage": "Portuguese",
  "ChooseAIModel": "gpt-4",
  "AnswerFileName": "answer.txt",
  "PkgName": "maslow-picker-uploader",
  "EndpointName": "delete_file_cloud",
  "SDKMethodName": "MaslowFilePickUp",
  "LatestAPIKey": "95561caf4ddcf9af39d3dfaa474558dc",
  "TestPrompt": "",
  "get_ai_service_language": "javascript (import/export)",
  "get_ai_service_file_ext": "js",
  "get_ai_service_args": "imgPath (string, the path/url of the photo to be cropped), cropAreaSize (number, the size of the crop square's sides), onSuccess (a callback that's called with the cropped picture path as argument), onError (a callback that's called when something got wrong during cropping)",
  "get_ai_service_description": "A react Native component that gives the user a photo cropping UI, via a drag-and-drop crop square.\r\nThere's a crop button that crops the picture, where the crop square is located within the picture,\r\nand returns the path of the cropped piece",
  "get_ai_service_return_value": "A react Native component that gives the user a photo cropping UI, via a drag-and-drop crop square.\r\nThere's a crop button that crops the picture (imgPath), where the crop square is located within that picture,\r\nand returns the path of the cropped piece. this also runs the onSuccess callback with that same cropped piece path as argument.\r\nIf something's wrong, return null, and run onError with the error as argument.",
  "TestPrompt2": "",
  "TestPrompt3": ""
}