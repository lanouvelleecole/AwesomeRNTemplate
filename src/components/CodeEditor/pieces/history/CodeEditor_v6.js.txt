

// Import necessary components from react and react-native-webview
import React from 'react';
import { WebView } from 'react-native-webview';

// Define the CodeEditor component
const CodeEditor = ({ initialCode = '', onCodeChanged }) => {
  // Define aceLocation. Since it is noted that local server is not available,
  // we use a public instance of ace hosted on a CDN.
  const aceLocation = 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.12/ace.js';

  // Define the JavaScript code to be injected into WebView.
  // This includes initialization of Ace editor, setting theme and mode,
  // adding event listener for changes in editor contents.
  const javascriptToInject = `
    // Load the Ace editor
    var aceEditor = ace.edit("editor");

    // Set the theme of the Ace editor
    aceEditor.setTheme("ace/theme/monokai");

    // Set the language mode of the Ace editor (javascript in this case)
    aceEditor.getSession().setMode("ace/mode/javascript");

    // If there is an initial code, set it in the editor
    aceEditor.setValue(${JSON.stringify(initialCode)});

    // Add event listener for changes in the editor's contents
    aceEditor.on('change', function() {
      // Whenever the code in the Ace editor changes,
      // send the current value to the react native side using the postMessage function.
      // The onMessage prop in the WebView component can capture this message.
      window.ReactNativeWebView.postMessage(aceEditor.getValue());
    });
  `;

  // Return the WebView component
  return (
    <WebView
      // Load Ace editor from the specified location
      source={{ uri: aceLocation }}

      // Inject JavaScript into WebView
      injectedJavaScript={javascriptToInject}

      // Function for handling messages sent from the WebView
      onMessage={(event) => {
        // This event will be triggered when the Ace editor content changes.
        // The new content can be captured via event.nativeEvent.data.
        if (onCodeChanged) {
          onCodeChanged(event.nativeEvent.data);
        }
      }}

      // Take the entire space available
      style={{ flex: 1 }}
    />
  );
}

// Export the CodeEditor component
export default CodeEditor;

