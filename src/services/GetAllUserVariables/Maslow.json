{
  "codePart": "// Function: GetAllUserVariables\n// Arguments: code (string, some computer code)\n// Returns: Array of strings (user variables found in the source code)\n\nfunction GetAllUserVariables(code) {\n  try {\n    // Initialize an empty array to store the found user variables\n    let userVariables = [];\n\n    // Regular expression pattern to match user variables\n    const pattern = /\\{\\{([A-Za-z0-9_]+)\\}\\}/g;\n\n    // Find all matches in the code using the regular expression pattern\n    const matches = code.match(pattern);\n\n    // If no matches were found, return null\n    if (!matches) {\n      return null;\n    }\n\n    // Iterate through the matches and extract the variable names without brackets\n    for (let i = 0; i < matches.length; i++) {\n      // Extract the variable name from the matched string by removing the surrounding brackets\n      const variableName = matches[i].substring(2, matches[i].length - 2);\n\n      // Add the variable name to the userVariables array\n      userVariables.push(variableName);\n    }\n\n    // Return the array of user variables\n    return userVariables;\n  } catch (error) {\n    // If any error occurs during the search, return null\n    return null;\n  }\n}\n\n// Export the function for external usage\nexport { GetAllUserVariables };",
  "answer": "// Function: GetAllUserVariables\n// Arguments: code (string, some computer code)\n// Returns: Array of strings (user variables found in the source code)\n\nfunction GetAllUserVariables(code) {\n  try {\n    // Initialize an empty array to store the found user variables\n    let userVariables = [];\n\n    // Regular expression pattern to match user variables\n    const pattern = /\\{\\{([A-Za-z0-9_]+)\\}\\}/g;\n\n    // Find all matches in the code using the regular expression pattern\n    const matches = code.match(pattern);\n\n    // If no matches were found, return null\n    if (!matches) {\n      return null;\n    }\n\n    // Iterate through the matches and extract the variable names without brackets\n    for (let i = 0; i < matches.length; i++) {\n      // Extract the variable name from the matched string by removing the surrounding brackets\n      const variableName = matches[i].substring(2, matches[i].length - 2);\n\n      // Add the variable name to the userVariables array\n      userVariables.push(variableName);\n    }\n\n    // Return the array of user variables\n    return userVariables;\n  } catch (error) {\n    // If any error occurs during the search, return null\n    return null;\n  }\n}\n\n// Export the function for external usage\nexport { GetAllUserVariables };",
  "what_we_wanna_do": "Create a function in a given programming language (via Chat GPT, the magical A.I.)",
  "name": "GetAllUserVariables",
  "affine_subfolder": "src/services",
  "ask_for_subfolder": "src/services",
  "affine_string_repo": "src/AppStrings",
  "string_repo_folder_path": "src/AppStrings",
  "string_repo_file_path": "AppStrings.js",
  "string_name": "xf2j8VLZ",
  "string_src": "Visite cette page, et abonne toi à l'API Maslow. \nCe qui te donnera accès à un outil super-méga-ultra-utile pour toi, \nprogrammeur/artiste/businessman/rêveur/insomniaque/philosophe \n(PICK AND CHOOSE ONE ;-) . \n\nLe coût de la souscription est de 8 € seulement,\nAlors n'hésites surtout pas, et lance toi dans l'aventure ! \n\nSuis le lien ci dessous, pour souscrire à l'API Maslow, \net tu recevras une clé API (via l'adresse e-mail fournie durant paiement)\nce qui te permettra d'accèder aux immenses pouvoirs de MaslowGPT.",
  "string_dest": "Hello friend",
  "affine_file_where_we_use_string": "src/AllGenerators/SubscribeImpromptuCommand",
  "ask_for_js_file_string": "src/AllGenerators/SubscribeImpromptuCommand/asyncWork.js",
  "row_name": "suki",
  "question_type": "A customizable U.I. (User Interface) as you wish, according to your needs.",
  "question_name": "DescribeProgramInputs",
  "affine_questionnaire": "src",
  "questionnaire_folder_path": "src/pages/MyArduinoPrograms/pieces/EditItemInMyArduinoPrograms/MyArduinoProgramsEditList",
  "questionnaire_file_name": "MyArduinoProgramsEditList.js",
  "repo_name": "AppStrings",
  "description_string_dest": "Foul-smelling Anus",
  "error_string_name": "xpKkWfEJ",
  "error_string_src": "set checkInput to true",
  "error_string_dest": "Oops... This value is not valid.",
  "question_page_name": "TestPage",
  "question_default_answer": "currentItem?.name",
  "question_default_textinput": "currentItem?.name",
  "question_on_textinput_changed": "",
  "question_validity_condition": "input?.length > 0",
  "question_DB_save_path": "src\\pages\\TestPage\\pieces\\AddItemToTestPage\\AddItemToDB.js",
  "question_DB_edit_path": "src\\pages\\TestPage\\pieces\\EditItemInTestPage\\EditItemInTestPageDB.js",
  "databaseinfo_path": "src\\reduxState\\TestPage\\DatabaseInfo.js",
  "row_type": "TEXT",
  "row_default_value": "",
  "AddCommandName": "make-quick-fix",
  "AddCommandPrompts": "",
  "AddCommandActions": "",
  "TestPpt1": "g",
  "TestPpt2": "t",
  "GptQuestionName": "QNA",
  "AskQuestion": "translate this in english: \"Si besoin, Ajoute des marqueurs {{VARIABLE_NAME}} dans ton code, pour que l'utilisateur de ton programme puisse fournir des donnees a ton programmme. Plus de details a l etape suivante.\"",
  "AffineDeletePath": "QNAS",
  "DeletePath": "QNAS/Maslow.json",
  "AffineOriginalPath": "src\\services\\DeletePreviousLookalikeLine\\DeletePreviousLookalikeLine.js",
  "OriginalPath": "src\\services\\DeletePreviousLookalikeLine\\DeletePreviousLookalikeLine.js",
  "DuplicatePath": "src\\services\\GrabSteakInSandwich",
  "delete_or_not": "Oui, supprime App.js et consorts.",
  "AppName": "ArduinoGPT",
  "gold_caviar": null,
  "get_appbar_title_dest": "Title",
  "AffineAppStrings": "src/AppStrings",
  "ChooseAppStrings": "src/AppStrings/AppStrings.js",
  "ChooseLanguage": "English",
  "ChooseAIModel": "gpt-3.5-turbo",
  "AnswerFileName": "answer.txt",
  "PkgName": "maslow-picker-uploader",
  "EndpointName": "delete_file_cloud",
  "SDKMethodName": "MaslowFilePickUp",
  "LatestAPIKey": "d0506c1fc623ce2daccff4503a725c68",
  "TestPrompt": "",
  "TestPrompt2": "",
  "TestPrompt3": "",
  "ChooseMaslowCMD": "generate",
  "get_custom_ui_base": "A UI that enables you to make a selection from a list.",
  "get_ai_service_version": 1,
  "get_ai_service_language": "javascript (import/export)",
  "get_ai_service_file_ext": "js",
  "get_ai_service_args": "code (string, some computer code)",
  "get_ai_service_description": "Returns a list of strings containing all the user variables found in the source code. Return null if no user variable was found, or if an error took place during search.",
  "get_ai_service_return_value": "Returns a list of strings containing all the user variables found in the source code. \r\nReturn null if no user variable was found, or if an error took place during search.\r\nThe user variables are looking like this, with double brackets around them: {{VARIABLE_NAME}} , \r\nand I want a list of [\"VARIABLE_NAME_1\", \"VARIABLE_NAME_2\", ....] , without double brackets"
}