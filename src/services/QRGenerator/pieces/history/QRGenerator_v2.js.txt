

// Import necessary libraries
import React, { useRef } from 'react';
import { View, TouchableOpacity, Text, Linking } from 'react-native';
import QRCode from 'react-native-qrcode-svg';
import { fs } from 'react-native-blob-util';

export default function QRGenerator({ qrText, onSuccess, onError }) {
  // Create a reference to the QR code
  let qrRef = useRef(null);

  // Function for creating a QR code
  const handleCreate = () => {
    // Check if qrText is provided
    if(qrText) {
      // Generate QR code and call the onSuccess callback function
      onSuccess('QR code generated successfully!');
    } else {
      // qrText is not provided, hence call the onError callback function
      onError('No qrText provided to generate QR code.');
    }
  };

  // Function for downloading the QR code
  const handleDownload = async () => {
    // Check if a QR code has been generated
    if(!qrRef.current) {
      onError('No QR code to download.');
      return;
    }

    // Save the QR code to a temporary path
    const path = `${fs.dirs.CacheDir}/qrcode.png`;

    // Get the base64 data of the QRCode
    qrRef.current.toDataURL(async (data) => {
      // write the base64 data to file
      await fs.writeFile(path, data, 'base64')
        .then((success) => {
          console.log('QR Code written to file!');
          // Open the QR code in the device's default browser application
          Linking.openURL(path);
        })
        .catch((err) => {
          console.log(err.message);
          onError(err.message);
        });
    });
  };

  return (
    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>
      {qrText && <QRCode value={qrText} getRef={(c) => (qrRef = c)} />}

      <View style={{ flexDirection: 'row' }}>
        <TouchableOpacity onPress={handleCreate}>
          <Text>Create QR Code</Text>
        </TouchableOpacity>          

        <TouchableOpacity onPress={handleDownload}>
          <Text>Download QR Code</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
}

